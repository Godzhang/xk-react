(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.react = factory());
})(this, (function () { 'use strict';

	// 判断当前环境是否支持 Symbol
	const supportSymbol = typeof Symbol === "function" && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for("react.element")
	    : 0xeac7;

	// React Element
	// 与宿主环境无关
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: "xk" // 为了与真实 react 区分开添加的字段
	    };
	    return element;
	};
	const jsxDEV = function (type, config) {
	    // config 中 key 和 ref 要单独处理
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (let prop in config) {
	        const val = config[prop];
	        if (prop === "key") {
	            if (val !== undefined) {
	                // key 转成字符串
	                key = "" + val;
	            }
	            continue;
	        }
	        if (prop === "ref") {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 判断 prop 是否是 config 自己的属性
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	var index = {
	    version: "0.0.0",
	    createElement: jsxDEV
	};

	return index;

}));
